
- name: install required packages for graphite
  apt: pkg={{ item }} state=latest
  with_items:
    - libcairo2-dev
    - libffi-dev # for cairocffi
    - python-dev
    - python-pip
    - python-cairo
    - sqlite3

- name: ensure graphite directory exists
  file:
    path: /opt/graphite/
    state: directory

- name: install graphite/whisper and carbon
  pip: name={{ item }}
  with_items:
    - https://github.com/graphite-project/ceres/tarball/master
    - whisper
    - carbon
    - graphite-web
    - django
    - django-tagging
    - Twisted<12.0
    - gunicorn
    - python-memcached==1.47
    - txAMQP==0.4
    - simplejson==2.1.6
    - pytz
    - pyparsing==1.5.7
    - cairocffi

- name: Configure carbon cache
  template: src=carbon.conf.j2 dest=/opt/graphite/conf/carbon.conf mode=0644

- name: Configure carbon storage schema
  template: src=storage-schemas.conf.j2 dest=/opt/graphite/conf/storage-schemas.conf mode=0644

- name: Configure carbon storage aggregation
  template: src=storage-aggregation.conf.j2 dest=/opt/graphite/conf/storage-aggregation.conf mode=0644

- name: graphite conf
  template: src=local_settings.py.j2 dest=/opt/graphite/webapp/graphite/local_settings.py mode=0644

- name: graphite wsgi
  template: src=graphite_wsgi.py.j2 dest=/opt/graphite/webapp/graphite/graphite_wsgi.py mode=0644


- name: syncdb for graphite
  shell: export PYTHONPATH=/opt/graphite/webapp/; /usr/bin/python /opt/graphite/webapp/graphite/manage.py syncdb --noinput --settings=graphite.settings

- name: graphite log folder
  file: state=directory path=/opt/graphite/storage/log/webapp

# - name: Create PIP requirements file
#   copy: src=requirements.txt dest=/tmp/requirements.txt

# - name: Install Graphite from PIP
#   pip: requirements=/tmp/requirements.txt
#   environment:
#     PYTHONPATH: "/opt/graphite/lib:/opt/graphite/webapp"

# SUPERVISOR

- name: Copy supervisor configuration for graphite
  template: src=supervisor-graphite.conf.j2 dest=/etc/supervisor/conf.d/graphite.conf
  notify:
    - reload supervisor

# NGinx

- name: Set file permissions
  command: /bin/chown -R {{ nginx_user }}:{{ nginx_group }} /opt/graphite

- name: Copy nginx configuration for graphite
  template: src=nginx-graphite.conf.j2 dest=/etc/nginx/sites-available/graphite.conf owner={{ nginx_user }} group={{ nginx_group }}

- name: generate htpasswd for graphite
  when: graphite.nginx_htpasswd is defined
  template: src=graphite.htpasswd.j2 dest=/opt/graphite/graphite.htpasswd owner={{ nginx_user }} group={{ nginx_group }}

- name: Make the SSL directory.
  when: graphite.nginx_enable_ssl
  file: state=directory path={{ graphite.nginx_ssl_path }} owner={{ nginx_user }} group={{ nginx_group }}

- name: Upload SSL private Cert
  when: graphite.nginx_enable_ssl
  copy: src=files/ssl/{{graphite.nginx_ssl_cert}} dest={{graphite.nginx_ssl_path}}/{{graphite.nginx_ssl_cert}} owner={{ nginx_user }} group={{ nginx_group }}

- name: Upload SSL Key
  when: graphite.nginx_enable_ssl
  copy: src=files/ssl/{{graphite.nginx_ssl_key}} dest={{graphite.nginx_ssl_path}}/{{graphite.nginx_ssl_key}} owner={{ nginx_user }} group={{ nginx_group }}

- name: Link nginx configuration for graphite
  file: src=/etc/nginx/sites-available/graphite.conf dest=/etc/nginx/sites-enabled/graphite.conf state=link owner={{ nginx_user }} group={{ nginx_group }}
  notify:
    - restart nginx
